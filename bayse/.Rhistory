iter=1100,
warmup=100,
thin=1,
chains=3)
#問2　母数を推定し、1で使用した母数と一致しているかを確認しよう。
model<-"
data{
real Kankaku[1000];
int Userid[1000];
}
parameters{
real <lower=0> alpha;
real <lower=0> beta;
}
model{
real lamda[100];
lamda~normal(5,1.2);
for (i in 1:100)
lamda[i]~gamma(alpha,beta);
for(j in 1:1000)
Kankaku[j]~exponential(lamda[Userid[j]]);
}"
yData<-list("Kankaku"=kankaku,"Userid"=userid) #埋めてみよ
library(rstan)
fit<-stan(
model_code = model,
data=yData,
iter=1100,
warmup=100,
thin=1,
chains=3)
#問2　母数を推定し、1で使用した母数と一致しているかを確認しよう。
model<-"
data{
real Kankaku[1000];
int Userid[1000];
}
parameters{
real <lower=0> alpha;
real <lower=0> beta;
}
model{
real lamda[100];
for (i in 1:100)
lamda[i]~gamma(alpha,beta);
for(j in 1:1000)
Kankaku[j]~exponential(lamda[Userid[j]]);
}"
yData<-list("Kankaku"=kankaku,"Userid"=userid) #埋めてみよ
library(rstan)
fit<-stan(
model_code = model,
data=yData,
iter=1100,
warmup=100,
thin=1,
chains=3)
#まずはデータ作成
library(rstan)
x1=runif(100,0,30)
x2=runif(100,30,40)
y=10*x1-23*x2-15+rnorm(100,0,15)
pairs(data.frame(x1,x2,y))
# Stanコード。別ファイル（.stan）にdata{から書いてもよし。
#インデントを気にしない言語ではあるが、可読性を高めるためちゃんとインデントしよう。
model <- "
data {
int N;
real X1[N];
vector[N] X2;
vector[N] Y;
real New_X1[3];
real New_X2[3];
}
parameters {
real a1;
real a2;
real b;
real<lower=0> sigma;
}
transformed parameters{
real mu[N]; //長さNの実数ベクトルを作る
for (i in 1:N)
mu[i] = a1*X1[i]+a2*X2[i]+b; //for文で、各データポイントに対して期待値muを作成
}
model {
for (i in 1:N)
Y[i] ~ normal(mu[i],sigma);}
generated quantities {
real yhat[3];
for (i in 1:3)
yhat[i] = normal_rng(a1*New_X1[i]+a2*New_X2[i]+b, sigma);
}"
yData<-list(N=length(y),X1=x1,X2=x2,Y=y,New_X1=c(10,11,21),New_X2=c(10,11,21))
#yData<-list(N=length(y),X=x,Y=y,new_N=5,new_X=c(5,10,15,20,25))
library(rstan)
fit<-stan(
model_code = model,
data=yData,
iter=1100,
warmup=100,
thin=1,
chains=3)
traceplot(fit)
stan_hist(fit)
stan_hist(fit,pars=c("a1","a2","b"))
ms=extract(fit)
ms$yhat
summary(ms$yhat)
install.packages("brms")
library(brms)
head(mtcars)
fit <- lm(mpg ~ wt * am, data = mtcars)
summary(fit)
fit <- brm(mpg ~ wt * am,
data = mtcars,
iter = 2000,
warmup = 1000,
seed = 1234,
chain = 4)
fit <- brm(mpg ~ wt * am,
data = mtcars,
iter = 2000,
warmup = 1000,
seed = 1234,
chain = 4)
summary(fit)
fit
waic(fit)
get_prior(mpg ~ wt * am, data = mtcars)
make_stancode(mpg ~ wt * am,
data = mtcars,
prior = c(prior_string("normal(0, 10)", class = "b"),
prior(student_t(3, 19, 10), class = Intercept),
prior_(~student_t(3, 0, 10), class = ~sigma)
)
)
plot(fit)
conditional_effects(fit)
#mtcarsデータを使用
head(mtcars)
#mtcarsデータを使用
(mtcars)
#mtcarsデータを使用
data(mtcars)
mtcars
View(mtcars)
View(mtcars)
fit <- lm(mpg ~ wt * am, data = mtcars)
summary(fit)
#brmsで回帰
fit <- brm(mpg ~ wt * am,
family = "normal",
data = mtcars,
iter = 2000,
warmup = 1000,
seed = 1234,
chain = 2)
fit
summary(fit)
waic(fit)
summary(fit)
#Rの組み込みのlm関数で回帰
fit <- lm(mpg ~ wt * am, data = mtcars)
summary(fit)
#brmsで回帰
fit_brm <- brm(mpg ~ wt * am,
family = "normal",
data = mtcars,
iter = 2000,
warmup = 1000,
seed = 1234,
chain = 2)
get_prior(mpg ~ wt * am, data = mtcars)
get_prior(fit_brm)
get_prior(mpg ~ wt * am, data = mtcars)
get_prior(mpg ~ wt * am)#, data = mtcars)
get_prior(mpg ~ wt * am, data = mtcars)
c(prior_string("normal(0, 10)", class = "b"),
prior(student_t(3, 19, 10), class = Intercept),
prior_(~student_t(3, 0, 10), class = ~sigma)
)
get_prior(mpg ~ wt , data = mtcars)
* am
get_prior(mpg ~ wt * am, data = mtcars)
make_stancode(mpg ~ wt * am,
data = mtcars,
prior = c(prior_string("normal(0, 10)", class = "b"),
prior(student_t(3, 19, 10), class = Intercept),
prior_(~student_t(3, 0, 10), class = ~sigma)
)
)
conditional_effects(fit)
conditional_effects(fit_brm)
plot(fit)
plot(fit_brm)
#stanコードを生成
make_stancode(mpg ~ wt * am,
data = mtcars,
prior = c(prior(normal(0, 10), class = b),
prior(student_t(3, 19, 10), class = Intercept),
prior(student_t(3, 0, 10), class = sigma)
)
)
prior(normal(0, 10), class = b)
#
conditional_effects(fit_brm)
plot(fit_brm)
stanplot(fit_brm)
mtcars$wt
testdata<-data.frame()
testdata$wt<-c(1,2,3)
testdata<-data.frame("wt"=c(1,2))
testdata
testdata<-data.frame("wt"=c(3.21,2.22),"am"=c(1,0))
testdata
mtcars$am
fitted(fit_brm,testdata)
#実際にサンプリングを行って予測値を計算（generated_quantitiesに相当）
mcmc_sample<-as.mcmc(fit_brm,combine_chains = TRUE)
head(mcmc_sample)
mu <- c(10, 20)
cov <- matrix(c(2.0, -0.8, -0.8, 1.0), ncol = 2)
data <- mvrnorm(100, mu = mu, Sigma = cov)
#まずはデータ作成
library(rstan)
data <- mvrnorm(100, mu = mu, Sigma = cov)
library(MASS)
data <- mvrnorm(100, mu = mu, Sigma = cov)
colnames(data) <- c('X1', 'X2')
g <- ggplot(as.data.frame(data), aes(x = X1, y = X2))
g <- g + geom_point()
print(g)
y=10*x1-23*x2-15+rnorm(100,0,15)
data
head(data)
data <- mvrnorm(1, mu = mu, Sigma = cov)
g <- ggplot(as.data.frame(data), aes(x = X1, y = X2))
g <- g + geom_point()
print(g)
colnames(data) <- c('X1', 'X2')
g <- ggplot(as.data.frame(data), aes(x = X1, y = X2))
g <- g + geom_point()
print(g)
mu <- c(10, 20)
cov <- matrix(c(2.0, -0.8, -0.8, 1.0), ncol = 2)
data <- mvrnorm(1, mu = mu, Sigma = cov)
colnames(data) <- c('X1', 'X2')
g <- ggplot(as.data.frame(data), aes(x = X1, y = X2))
head(data)
data
data+c(10,3)
data+c(100,30)
data2<-data+c(100,30)
yData<-list(Y=data2,Cov=cov)
#yData<-list(N=length(y),X=x,Y=y,new_N=5,new_X=c(5,10,15,20,25))
library(rstan)
fit<-stan(
model_code = model,
data=yData,
iter=1100,
warmup=100,
thin=1,
chains=3)
# Stanコード。別ファイル（.stan）にdata{から書いてもよし。
#インデントを気にしない言語ではあるが、可読性を高めるためちゃんとインデントしよう。
model <- "
data {
vector[2] Y;
matrix[2,2] Cov;
}
parameters {
vector[2] mu;
}
model {
Y ~ multi_normal(mu,Cov);}"
fit<-stan(
model_code = model,
data=yData,
iter=1100,
warmup=100,
thin=1,
chains=3)
traceplot(fit)
stan_hist(fit)
stan_hist(fit,pars=c("a1","a2","b"))
# Stanコード。別ファイル（.stan）にdata{から書いてもよし。
#インデントを気にしない言語ではあるが、可読性を高めるためちゃんとインデントしよう。
model <- "
data {
vector[2] Y;
matrix[2,2] Cov;
}
parameters {
vector[2] mu;
real<lower=0> sigma2;
}
transformed parameters{
matrix[2,2] Cov2;
for (i in 1:2)
Cov2[i,i]=sigma2;
}
model {
Y ~ multi_normal(mu,Cov+Cov2);
}"
fit<-stan(
model_code = model,
data=yData,
iter=1100,
warmup=100,
thin=1,
chains=3)
# Stanコード。別ファイル（.stan）にdata{から書いてもよし。
#インデントを気にしない言語ではあるが、可読性を高めるためちゃんとインデントしよう。
model <- "
data {
vector[2] Y;
matrix[2,2] Cov;
}
parameters {
vector[2] mu;
real<lower=0> sigma2;
}
transformed parameters{
matrix[2,2] Cov2;
for (i in 1:2)
Cov2[i,i]=sigma2;
}
model {
sigma2~ chi_square(3)
Y ~ multi_normal(mu,Cov+Cov2);
}"
yData<-list(Y=data2,Cov=cov)
#yData<-list(N=length(y),X=x,Y=y,new_N=5,new_X=c(5,10,15,20,25))
library(rstan)
fit<-stan(
model_code = model,
data=yData,
iter=1100,
warmup=100,
thin=1,
chains=3)
# Stanコード。別ファイル（.stan）にdata{から書いてもよし。
#インデントを気にしない言語ではあるが、可読性を高めるためちゃんとインデントしよう。
model <- "
data {
vector[2] Y;
matrix[2,2] Cov;
}
parameters {
vector[2] mu;
real<lower=0> sigma2;
}
transformed parameters{
matrix[2,2] Cov2;
for (i in 1:2)
Cov2[i,i]=sigma2;
}
model {
sigma2~ chi_square(3);
Y ~ multi_normal(mu,Cov+Cov2);
}"
yData<-list(Y=data2,Cov=cov)
#yData<-list(N=length(y),X=x,Y=y,new_N=5,new_X=c(5,10,15,20,25))
library(rstan)
fit<-stan(
model_code = model,
data=yData,
iter=1100,
warmup=100,
thin=1,
chains=3)
traceplot(fit)
stan_hist(fit)
# Stanコード。別ファイル（.stan）にdata{から書いてもよし。
#インデントを気にしない言語ではあるが、可読性を高めるためちゃんとインデントしよう。
model <- "
data {
vector[2] Y;
matrix[2,2] Cov;
}
parameters {
vector[2] mu;
real<lower=0> sigma2;
}
transformed parameters{
matrix[2,2] Cov2;
for (l in 1:2)
for (j in 1:2)
Cov2[l,j]=0;
for (l in 1:2)
Cov2[l,l]=sigma2;
}
model {
sigma2~ chi_square(3);
Y ~ multi_normal(mu,Cov+Cov2);
}"
fit<-stan(
model_code = model,
data=yData,
iter=1100,
warmup=100,
thin=1,
chains=3)
traceplot(fit)
stan_hist(fit)
stan_hist(fit,pars=c("a1","a2","b"))
diag(3)
yData<-list(Y=data2,Cov=cov,Cov2=diag(2))
#yData<-list(N=length(y),X=x,Y=y,new_N=5,new_X=c(5,10,15,20,25))
library(rstan)
fit<-stan(
model_code = model,
data=yData,
iter=1100,
warmup=100,
thin=1,
chains=3)
traceplot(fit)
# Stanコード。別ファイル（.stan）にdata{から書いてもよし。
#インデントを気にしない言語ではあるが、可読性を高めるためちゃんとインデントしよう。
model <- "
data {
vector[2] Y;
matrix[2,2] Cov;
matrix[2,2] Cov2
}
parameters {
vector[2] mu;
real<lower=0> sigma2;
}
model {
sigma2~ chi_square(3);
Y ~ multi_normal(mu,Cov+Cov2*sigma2);
}"
yData<-list(Y=data2,Cov=cov,Cov2=diag(2))
#yData<-list(N=length(y),X=x,Y=y,new_N=5,new_X=c(5,10,15,20,25))
library(rstan)
fit<-stan(
model_code = model,
data=yData,
iter=1100,
warmup=100,
thin=1,
chains=3)
# Stanコード。別ファイル（.stan）にdata{から書いてもよし。
#インデントを気にしない言語ではあるが、可読性を高めるためちゃんとインデントしよう。
model <- "
data {
vector[2] Y;
matrix[2,2] Cov;
matrix[2,2] Cov2;
}
parameters {
vector[2] mu;
real<lower=0> sigma2;
}
model {
sigma2~ chi_square(3);
Y ~ multi_normal(mu,Cov+Cov2*sigma2);
}"
yData<-list(Y=data2,Cov=cov,Cov2=diag(2))
#yData<-list(N=length(y),X=x,Y=y,new_N=5,new_X=c(5,10,15,20,25))
library(rstan)
fit<-stan(
model_code = model,
data=yData,
iter=1100,
warmup=100,
thin=1,
chains=3)
traceplot(fit)
stan_hist(fit)
#brmsでポアソン回帰をしよう
library(brms)
#データ読み込み
fish<-read.csv("3-8-1-fish-num-1.csv")
head(fish)
setwd("~/sugakubunka-statistics/bayse")
#データ読み込み
fish<-read.csv("3-8-1-fish-num-1.csv")
head(fish)
library(ggplot2)
ggplot(data = fish,
mapping = aes(x = temperature, y = fish_num) )+
geom_point(aes(color = weather))
#brmsで回帰
fit_brm <- brm(fish_num ~ weather + temperature, #回帰式。wtとamとwt*amの3つの係数と定数項
family = "poisson", #εの分布がND
data = fish, #使うデータ
iter = 2000,
warmup = 1000,
chain = 2)
fit_brm
exp(-0.6)
#brmsで作ったモデルを用いた予測
testdata<-data.frame("weather"=c("cloudy","sunny"),"temperature"=c(1,20))
testdata
fitted(fit_brm,testdata)
#信用区間
eff <- conditional_effects(fit_brm, effects= "temperature:weather")
plot(eff,points = TRUE)
#stanコードを見る
make_stancode(fish_num ~ weather + temperature,
data = fish,
family = "poisson"
)
#回帰の結果を見る
conditional_effects(fit_brm)
mcmc_plot(fit_brm)
#MCMCサンプリングのヒストグラム
plot(fit_brm)
